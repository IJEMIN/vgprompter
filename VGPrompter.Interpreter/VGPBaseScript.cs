using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace VGPrompter.Interpreter {
    public abstract class VGPBaseScript : IEnumerator, IEnumerator<string> {

        [Serializable]
        public class State {
            public Stack<int> CallingLabelIndexStack { get; private set; } = new Stack<int>();
            public Stack<int> CallingLineIndexStack { get; private set; } = new Stack<int>();

            public int LabelIndex { get; private set; } = 0;
            public int CurrentIndex { get; private set; } = 0;

            public State() { }

            public void Jump(int label_index) {
                LabelIndex = label_index;
                CurrentIndex = 0;
            }

            public void Call(int label_index) {
                CallingLineIndexStack.Push(CurrentIndex);
                CallingLabelIndexStack.Push(LabelIndex);
                Jump(label_index);
            }

            /*public State(int i = 0, Stack<int> call_stack = null) {
                CallingLabelIndexStack = 
                CallingLineIndexStack = call_stack ?? new Stack<int>();
                CurrentIndex = i;
            }*/
        }

        public State CurrentState { get; set; }

        // Allows for language-specific autogenerated flow changes
        public string LanguageID { get; set; }


        protected void Jump(int label_index) {
            LabelIndex = label_index;
            CurrentIndex = 0;
        }

        protected void Call(int label_index) {
            Jump(label_index);
            CallingLineIndexStack.Push(CurrentIndex);
            CallingLabelIndexStack.Push(LabelIndex);
        }

        protected int LabelIndex { get; set; }

        protected int CurrentIndex { get; set; } = 1;
        protected int CurrentDialogueLineIndex { get; set; } = 0;

        protected int[] DialogueBlockFirstLineIndexes { get; set; }
        protected int[] DialogueBlockLastLineIndexes { get; set; }

        // public Action<string> OnReturn { get; set; }
        // public Action<string> OnDialogueLine { get; set; }

        protected int? SelectedChoiceIndex { get; set; }

        protected abstract void OnDialogueLine(string s);
        protected abstract void OnReturn(string label);
        protected abstract void OnMenu(string s);
        protected abstract void OnChoice(string s);

        protected Stack<int> CallingLineIndexStack => CurrentState.CallingLineIndexStack;
        public Stack<int> CallingLabelIndexStack => CurrentState.CallingLabelIndexStack;

        // protected Stack<int> CallingLineIndexStack { get; set; }
        // public Stack<int> CallingLabelIndexStack { get; private set; } = new Stack<int>();


        protected Dictionary<string, string[][]> Lines { get; set; }

        int GetCurrentContainerIndex(int[] last_lines) {
            for (int i = 0; i < last_lines.Length; i++) {
                if (CurrentIndex <= last_lines[i]) {
                    return i;
                }
            }
            return -1;
        }

        protected bool Return() {
            if (CallingLineIndexStack.Count > 0) {
                CurrentIndex = CallingLineIndexStack.Pop();
                LabelIndex = CallingLabelIndexStack.Pop();
                return EvaluateLine();
            } else {
                // OnReturn?.Invoke(Label);
                OnReturn(Label);
                return false;
            }
        }

        public VGPBaseScript() { }

        public VGPBaseScript(VGPBaseScript.State state) : this() {
            // CurrentIndex = state.CurrentIndex;
            // CallingLineIndexStack = state.CallingLineIndexStack;
            CurrentState = state;
        }

        // public VGPScript2.State CurrentState => new State(CurrentIndex, CallingLineIndexStack);

        protected string[] Labels { get; set; }
        // protected int[] LabelFirstLine { get; set; }
        protected int[] LabelLastLine { get; set; }
        protected int[] LabelDialogueBlockCount { get; set; }


        protected string Label {
            get {
                var i = GetCurrentContainerIndex(LabelLastLine);
                if (i == -1) throw new Exception();
                return Labels[i];
            }
        }

        protected int DialogueBlockIndex => GetCurrentContainerIndex(DialogueBlockLastLineIndexes);
        protected int LineIndex => CurrentIndex - DialogueBlockFirstLineIndexes[DialogueBlockIndex];

        // public string Current => Lines[Label][DialogueBlockIndex][LineIndex];

        int[] CumulativeDialogueBlockCount() {
            var csum = new List<int>() { 0 };
            for (int i = 0; i < LabelDialogueBlockCount.Length - 1; i++) {
                csum.Add(csum[i] + LabelDialogueBlockCount[i]);
            }
            return csum.ToArray();
        }

        /*public string Current {
            get {
                var csum = CumulativeDialogueBlockCount();
                var i = GetCurrentContainerIndex(LabelLastLine);
                var a = GetCurrentContainerIndex(DialogueBlockLastLineIndexes) - csum[i];
                var b = CurrentIndex - DialogueBlockFirstLineIndexes[DialogueBlockIndex];
                OnDialogueLine?.Invoke($"{i}, {a}, {b}");
                OnDialogueLine?.Invoke(string.Join<string>(", ", Lines[Labels[i]].SelectMany(x => x)));

                OnDialogueLine?.Invoke(Lines[Labels[i]][a][b]);

                return Lines[Labels[i]][a][b];
            }
        }*/
        public string Current {
            get {
                return Lines[Label][CurrentIndex][CurrentDialogueLineIndex++];
            }
        }

        protected abstract bool EvaluateLine();

        object IEnumerator.Current => Current;

        public abstract void Dispose();
        public abstract void Reset();

        public bool MoveNext() {
            return EvaluateLine();
        }

    }
}
